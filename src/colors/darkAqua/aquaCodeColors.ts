import { CodeColors } from "../../utils/types";
import { aquaColors as colors } from "./aquaColors";

export const aquaCodeColors: CodeColors = {
  languages: {
    comment: colors.oysterPink,
    string: colors.yellow,
    constant: colors.dullLavender,
    variables: colors.lilyWhite,
    phpVariables: colors.dullLavender,
    keyword: colors.mauve,
    general: colors.mauve,
    modifier: colors.mauve,
    storage: colors.mauve,
    function: colors.chartreuse,
    objectMethod: colors.turquoise,
    class: colors.aquaMarine,
    types: colors.aquaMarine,
    this: colors.dullLavender,
    decorator: colors.dullLavender,
    magicFunctions: colors.dullLavender,
    attributes: colors.turquoise,
    generics: colors.sunglow,
    buildIn: colors.aquaMarine,
    params: colors.sunglow,
    brackets: colors.dawnPink,
    regexString: colors.yellow,
    regexNonCapture: colors.mauve,
    regexConstants: colors.aeroBlue,
    regexStartEnd: colors.geraldine,
    charGroup: colors.aquaMarine,
    captureGroup: colors.sunglow,
    assertionOperator: colors.geraldine,
    positiveLookahead: colors.chartreuse,
    propertyQuotes: colors.aquaMarine,
    docstring: colors.dullLavender,
    destructuringLhs: colors.sunglow,
    destructuringRhs: colors.lilyWhite,
    graphQlKeys: colors.yellow,
    graphQlFuncArgs: colors.sunglow,
    graphQlFragments: colors.aquaMarine,
    foreground: colors.dawnPink,
    shellConstant: colors.aeroBlue,
    shellVariables: colors.lilyWhite,
    makeFile: colors.yellow,
    Haskell: colors.dullLavender,
    aliases: colors.chartreuse,
    keys: colors.aquaMarine,
    dates: colors.sunglow,
    jsDocKeyWord: colors.mauve,
    jsDockTypes: colors.aquaMarine,
    jsDockComment: colors.oysterPink,
  },
  react: {
    classComponent: colors.aquaMarine,
    source: colors.dawnPink,
  },
  vue: {
    default: colors.turquoise,
    types: colors.aquaMarine,
  },
  json: {
    brackets: colors.dawnPink,
    comment: colors.oysterPink,
    constant: colors.aeroBlue,
  },
  xml: {
    meta: colors.tickleMePink,
    version: colors.tickleMePink,
    attribute: colors.tickleMePink,
    tag: colors.turquoise,
  },
  html: {
    meta: colors.tickleMePink,
    attribute: colors.tickleMePink,
    string: colors.yellow,
    constant: colors.mauve,
    tag: colors.lightRed,
    text: colors.dawnPink,
    comment: colors.oysterPink,
  },
  scss: {
    meta: colors.tickleMePink,
    generics: colors.tickleMePink,
    keyword: colors.tickleMePink,
    metaScss: colors.tickleMePink,
    parentSelector: colors.tickleMePink,
    comment: colors.oysterPink,
    bracket: colors.dawnPink,
    cssVar: colors.lilyWhite,
    scssVar: colors.mauve,
    class: colors.aquaMarine,
    function: colors.chartreuse,
    string: colors.yellow,
    property: colors.turquoise,
    propertyValue: colors.lightRed,
    custom: colors.fuchsiaBlue,
    id: colors.sunglow,
    pseudo: colors.aeroBlue,
    tag: colors.lightRed,
    type: colors.tickleMePink,
    unit: colors.electricLime,
  },
  gitGnoreAtr: {
    hash: colors.lightRed,
    string: colors.orange,
  },
  markdown: {
    bloquotes: colors.aquaMarine,
    bold: colors.mauve,
    braces: colors.dawnPink,
    bracesBlock: colors.dawnPink,
    bracesParagraph: colors.aquaMarine,
    changed: colors.orange,
    codeBlocks: colors.tickleMePink,
    constants: colors.aeroBlue,
    deleted: colors.geraldine,
    deprecated: colors.lightRed,
    diff: colors.fuchsiaBlue,
    error: colors.geraldine,
    filename: colors.yellow,
    header: colors.sunglow,
    horizontal: colors.turquoise,
    inline: colors.turquoise,
    inserted: colors.turquoise,
    invalid: colors.oysterPink,
    italic: colors.yellow,
    linkText: colors.aquaMarine,
    links: colors.aquaMarine,
    list: colors.electricLime,
    source: colors.dawnPink,
  },
};
