export type CodeColors = {
  languages: {
    comment: string;
    general: string;
    generics: string;
    modifier: string;
    brackets: string;
    keyword: string;
    string: string;
    propertyQuotes: string;
    docstring: string;
    storage: string;
    variables: string;
    phpVariables: string;
    constant: string;
    function: string;
    magicFunctions: string;
    params: string;
    class: string;
    attributes: string;
    objectMethod: string;
    this: string;
    types: string;
    decorator: string;
    buildIn: string;
    destructuringLhs: string;
    destructuringRhs: string;
    regexString: string;
    regexConstants: string;
    regexNonCapture: string;
    regexStartEnd: string;
    graphQlKeys: string;
    graphQlFuncArgs: string;
    graphQlFragments: string;
    charGroup: string;
    captureGroup: string;
    assertionOperator: string;
    positiveLookahead: string;
    jsDocKeyWord: string;
    jsDockTypes: string;
    jsDockComment: string;
    keys: string;
    dates: string;
    aliases: string;
    foreground: string;
    shellVariables: string;
    shellConstant: string;
    makeFile: string;
    Haskell: string;
    header: string;
    source: string;
    diff: string;
    test?: string;
    other?: string;
  };
  react: {
    classComponent: string;
    source: string;
  };
  vue: {
    default: string;
    attribute: string;
    types: string;
    other?: string;
    test?: string;
  };
  json: {
    comment: string;
    brackets: string;
    constant: string;
    other?: string;
    test?: string;
  };
  xml: {
    meta: string;
    version: string;
    tag: string;
    attribute: string;
    other?: string;
    test?: string;
  };
  html: {
    meta: string;
    tag: string;
    attribute: string;
    text: string;
    constant: string;
    string: string;
    comment: string;
    other?: string;
    test?: string;
  };
  scss: {
    generics: string;
    metaScss: string;
    keyword: string;
    type: string;
    meta: string;
    tag: string;
    custom: string;
    class: string;
    id: string;
    pseudo: string;
    property: string;
    propertyValue: string;
    parentSelector: string;
    unit: string;
    cssVar: string;
    scssVar: string;
    comment: string;
    string: string;
    bracket: string;
    function: string;
    other?: string;
    test?: string;
  };
  gitGnoreAtr: {
    string: string;
    hash: string;
    other?: string;
    test?: string;
  };
  markdown: {
    inserted: string;
    deleted: string;
    changed: string;
    invalid: string;
    deprecated: string;
    filename: string;
    error: string;
    bold: string;
    italic: string;
    list: string;
    inline: string;
    links: string;
    linkText: string;
    bloquotes: string;
    horizontal: string;
    codeBlocks: string;
    constants: string;
    braces: string;
    bracesParagraph: string;
    bracesBlock: string;
    other?: string;
    test?: string;
  };
};
